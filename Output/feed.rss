<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content"><channel><title>Marcelo Laprea</title><description>iOS Software Engineer - Blog - iOS Tutorials and Articles - Videos</description><link>https://lapreamarcelo.github.io</link><language>en</language><lastBuildDate>Mon, 20 Apr 2020 13:52:02 +0200</lastBuildDate><pubDate>Mon, 20 Apr 2020 13:52:02 +0200</pubDate><ttl>250</ttl><atom:link href="https://lapreamarcelo.github.io/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://lapreamarcelo.github.io/posts/Configuremos-Charles-en-Simulador-xcode</guid><title>Configuremos Charles en el simulador de iOS con Xcode</title><description>Con Charles podremos depurar solicitudes de red en nuestras apps y poder testear de una forma rápida y sencilla nuestra capa de red.</description><link>https://lapreamarcelo.github.io/posts/Configuremos-Charles-en-Simulador-xcode</link><pubDate>Fri, 27 Mar 2020 04:39:00 +0100</pubDate><content:encoded><![CDATA[<link href="https://lapreamarcelo.github.io/MyTheme/MarkDown.css" rel="stylesheet"></link><h1>Configuremos Charles en el simulador de iOS con Xcode</h1><h3>Antes de empezar con este post, tenemos que preguntarnos que es <strong>Charles</strong>.</h3><br /><blockquote><p>"Charles es un proxy HTTP / monitor HTTP / proxy inverso que permite a un desarrollador ver todo el tráfico HTTP y SSL / HTTPS entre su máquina e Internet. Esto incluye solicitudes, respuestas y los encabezados HTTP (que contienen las cookies y la información de almacenamiento en caché)." <a href="https://www.charlesproxy.com" target="_blank">Charles</a></p></blockquote><br /><p>Ahora, para que podemos usar <strong>Charles</strong>?. Básicamente para depurar solicitudes de red en nuestras aplicaciones. Hay muchas veces que como desarrolladores, queremos cambiar algunas solicitudes para ver si falla o forzar a la aplicación a recibir un valor incorrecto para ver cómo reacciona nuestra aplicación a esa solicitud. En otras ocasiones, solo queremos ver cuáles son las respuestas para descubrir por qué la aplicación falla. Hay muchas cosas que queremos probar, y a veces no sabemos cómo. Podemos hacer todo esto con <strong>Charles</strong>. Así que empecemos.</p><br /><ul><li><strong>Instala <a href="https://www.charlesproxy.com/download/" target="_blank">Charles</a> haciendo click en el link.</strong></li></ul><br /><ul><li><strong>Abre Charles y haz click en el Menú: Help &gt; SSL Proxying, y selecciona <em>Install Charles Root Certificate in iOS Simulators</em></strong>.</li></ul><br /><p align="center">
    <img src="https://lapreamarcelo.github.io/images/charles-tutorial/p1.png" width="70%" max-width="50%" alt="Charles" />
</p><br /><ul><li><strong>Ahora verifica que tienes la opción macOS Proxy seleccionada, para que podemos escuchar el trafico de red, así que selecciona en el Menú: Proxy &gt; macOS Proxy</strong></li></ul><br /><p align="center">
    <img src="https://lapreamarcelo.github.io/images/charles-tutorial/p2.png" width="50%" max-width="50%" alt="Charles" />
</p><br /><ul><li><strong>Reinicie su simulador y asegúrese de estar grabando el tráfico entrante. Deberías ver en la parte inferior derecha la etiqueta <em>Recording</em>. Si no, simplemente haga click en <em>Start Recording</em> buttom</strong></li></ul><br /><p align="center">
    <img src="https://lapreamarcelo.github.io/images/charles-tutorial/p3.png" width="50%" max-width="50%" alt="Charles" />
</p><br /><ul><li><strong>Ejecute la aplicación en el simulador, y en este momento, debería ver el tráfico entrante a la izquierda</strong></li></ul><br /><ul><li><strong>Ahora, debe asegurarse de habilitar SSL Proxying para las URL que desea probar. Hay dos formas de hacer esto:</strong></li></ul><br /><ul><li>La primera forma es haciendo click en Menú: Proxy &gt; SSL Proxying Settings y luego agregue la URL que desee.</li></ul><br /><p align="center">
    <img src="https://lapreamarcelo.github.io/images/charles-tutorial/p4.png" width="50%" max-width="50%" alt="Charles" />
    <img src="https://lapreamarcelo.github.io/images/charles-tutorial/p5.png" width="50%" max-width="50%" alt="Charles" />
</p><br /><ul><li>La segunda forma es cuando ve el tráfico entrante en la parte izquierda, simplemente haga click derecho en la URL que desee y haga click en <em>Enable SSL Proxying</em></li></ul><br /><p align="center">
       <img src="https://lapreamarcelo.github.io/images/charles-tutorial/p6.png" width="30%" max-width="50%" alt="Charles" />
   </p><br /><ul><li><strong>Ahora reinicie el simulador y verá las respuestas.</strong></li></ul><br /><ul><li><strong>Si hace click en la respuesta y en el <em>Contenido</em>, puede ver el JSON que estamos obteniendo. Ahora podemos comprobar por qué recibimos un error en la aplicación si ese es el caso.</strong></li></ul><br /><p align="center">
    <img src="https://lapreamarcelo.github.io/images/charles-tutorial/p7.png" width="90%" max-width="50%" alt="Charles" />
</p><br /><ul><li><strong>Vamos a mapear localmente algunas respuestas para que podamos simularlas. Haga click derecho en la respuesta y haga click <em>Save Response...</em></strong></li></ul><br /><p align="center">
    <img src="https://lapreamarcelo.github.io/images/charles-tutorial/p8.png" width="30%" max-width="50%" alt="Charles" />
</p><br /><ul><li><strong>Ahora haga click derecho en la solicitud y haga click en <em>Viewer Mappings...</em> y copie lo que son el Host, el Port y la Path, porque lo vamos a usar a continuación.</strong></li></ul><br /><p align="center">
    <img src="https://lapreamarcelo.github.io/images/charles-tutorial/p9.png" width="30%" max-width="50%" alt="Charles" />
    <img src="https://lapreamarcelo.github.io/images/charles-tutorial/p10.png" width="30%" max-width="50%" alt="Charles" />
</p><br /><ul><li><strong>Ahora haga click en el Menú en: Tools &gt; Map Local... y agrega uno nuevo. Para Local path: seleccionará la respuesta que guardó y para Host, Port y Path la completará con la información que obtuvo en el paso anterior.</strong></li></ul><br /><p align="center">
    <img src="https://lapreamarcelo.github.io/images/charles-tutorial/p11.png" width="30%" max-width="50%" alt="Charles" />
    <img src="https://lapreamarcelo.github.io/images/charles-tutorial/p12.png" width="50%" max-width="50%" alt="Charles" />
</p><br /><p align="center">
    <img src="https://lapreamarcelo.github.io/images/charles-tutorial/p13.png" width="50%" max-width="50%" alt="Charles" />
</p><br /><ul><li><strong>Ahora puede editar el JSON y comenzar a probar sus respuestas de red</strong></li></ul><br /><h4>Así es como configuras Charles para iOS Simulator. Para cualquier consulta puede contactarme en mi Twitter, Linkedin.</h4><br /><h3>Muchas gracias</h3>]]></content:encoded></item><item><guid isPermaLink="true">https://lapreamarcelo.github.io/posts/Setup-Charles-in-Simulator-xcode</guid><title>Let's setup Charles in iOS simulator with Xcode</title><description>With Charles with can debug the network requests in our apps so we can test in a simple way our network layer.</description><link>https://lapreamarcelo.github.io/posts/Setup-Charles-in-Simulator-xcode</link><pubDate>Fri, 27 Mar 2020 04:39:00 +0100</pubDate><content:encoded><![CDATA[<link href="https://lapreamarcelo.github.io/MyTheme/MarkDown.css" rel="stylesheet"></link><h1>Let's setup Charles in iOS simulator with Xcode</h1><h3>Before starting with this post, we should ask ourselves what is <strong>Charles</strong>.</h3><br /><blockquote><p>"Charles is an HTTP proxy / HTTP monitor / Reverse Proxy that enables a developer to view all of the HTTP and SSL / HTTPS traffic between their machine and the Internet. This includes requests, responses and the HTTP headers (which contain the cookies and caching information)." <a href="https://www.charlesproxy.com" target="_blank">Charles</a></p></blockquote><br /><p>Now, for what we can use <strong>Charles</strong>?. Basically to debug network requests in our apps. There are a lot of time that we as a Developer, wants to change some requests to see if it fails, or force the app to receive a wrong value to see how our app reacts to that request. Other time we just want to see what are the responses to figure it out why the app is failing. There are a lot of things we want to test, and sometimes we don't know how. We can do all of this with <strong>Charles</strong>. So let's begin.</p><br /><ul><li><strong>Install <a href="https://www.charlesproxy.com/download/" target="_blank">Charles</a> by clicking in the link.</strong></li></ul><br /><ul><li><strong>Open Charles and click in the Menu: Help &gt; SSL Proxying, and select <em>Install Charles Root Certificate in iOS Simulators</em></strong>.</li></ul><br /><p align="center">
    <img src="https://lapreamarcelo.github.io/images/charles-tutorial/p1.png" width="70%" max-width="50%" alt="Charles" />
</p><br /><ul><li><strong>Now make sure you have the option macOS Proxy selected, so we can listen traffic, so click in the Menu: Proxy &gt; macOS Proxy</strong></li></ul><br /><p align="center">
    <img src="https://lapreamarcelo.github.io/images/charles-tutorial/p2.png" width="50%" max-width="50%" alt="Charles" />
</p><br /><ul><li><strong>Restart your simulator and make sure you are recording the incoming traffic. You should see in the right bottom a <em>Recording</em> label. If not, just click in <em>Start Recording</em> buttom</strong></li></ul><br /><p align="center">
    <img src="https://lapreamarcelo.github.io/images/charles-tutorial/p3.png" width="50%" max-width="50%" alt="Charles" />
</p><br /><ul><li><strong>Run the app in the simulator, and at this moment, you should see the incoming traffic at the left</strong></li></ul><br /><ul><li><strong>Now, you have to make sure to enable SSL Proxying for the URLs that you want to test. There are two ways of doing this:</strong></li></ul><br /><ul><li>The first way is by clicking in the Menu: Proxy &gt; SSL Proxying Settings and then add the URL that you want.</li></ul><br /><p align="center">
       <img src="https://lapreamarcelo.github.io/images/charles-tutorial/p4.png" width="50%" max-width="50%" alt="Charles" />
       <img src="https://lapreamarcelo.github.io/images/charles-tutorial/p5.png" width="50%" max-width="50%" alt="Charles" />
   </p><br /><ul><li>The second way is when you see the incoming traffic in the left view of Charles, just right click the URL that you want and click <em>Enable SSL Proxying</em></li></ul><br /><p align="center">
       <img src="https://lapreamarcelo.github.io/images/charles-tutorial/p6.png" width="30%" max-width="50%" alt="Charles" />
   </p><br /><ul><li><strong>Now restart the simulator, and you will see the responses</strong></li></ul><br /><ul><li><strong>If you click the response, and the <em>Contents</em> you can see the JSON that we are getting. Now we can check why we are getting an error in the app if that is the case.</strong></li></ul><br /><p align="center">
    <img src="https://lapreamarcelo.github.io/images/charles-tutorial/p7.png" width="90%" max-width="50%" alt="Charles" />
</p><br /><ul><li><strong>Let's map locally some responses so we can mock them. Right click in the response, and click <em>Save Response...</em></strong></li></ul><br /><p align="center">
    <img src="https://lapreamarcelo.github.io/images/charles-tutorial/p8.png" width="30%" max-width="50%" alt="Charles" />
</p><br /><ul><li><strong>Now right click in the request and click <em>Viewer Mappings...</em> and copy what the Host, Port and Path are, because we are going to use it next.</strong></li></ul><br /><p align="center">
    <img src="https://lapreamarcelo.github.io/images/charles-tutorial/p9.png" width="30%" max-width="50%" alt="Charles" />
    <img src="https://lapreamarcelo.github.io/images/charles-tutorial/p10.png" width="30%" max-width="50%" alt="Charles" />
</p><br /><ul><li><strong>Now in the Menu click: Tools &gt; Map Local... and add a new one. For Local path: you will select the response that you saved and for Host, Port and Path you will fill it with the information that you got in the previous step.</strong></li></ul><br /><p align="center">
    <img src="https://lapreamarcelo.github.io/images/charles-tutorial/p11.png" width="30%" max-width="50%" alt="Charles" />
    <img src="https://lapreamarcelo.github.io/images/charles-tutorial/p12.png" width="50%" max-width="50%" alt="Charles" />
</p><br /><p align="center">
    <img src="https://lapreamarcelo.github.io/images/charles-tutorial/p13.png" width="50%" max-width="50%" alt="Charles" />
</p><br /><ul><li><strong>Now you can edit the JSON and start testing your network responses</strong></li></ul><br /><h3>That's how you setup Charles for iOS Simulator. For any questions you can contact me at my Twitter, Linkedin or Email.</h3><br /><h2>Thanks again</h2>]]></content:encoded></item></channel></rss>